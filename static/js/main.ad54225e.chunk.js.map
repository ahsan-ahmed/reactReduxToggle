{"version":3,"sources":["Components/Button/index.js","Actions/UserActions/index.js","Components/Text/index.js","App.js","serviceWorker.js","Reducers/TextReducer/index.js","Store/index.js","index.js"],"names":["Button","props","react_default","a","createElement","style","height","width","cursor","marginTop","onClick","changeText","setName","name1","type","payload","Text","this","user","React","Component","connect","state","dispatch","App","_this","className","Components_Button","Components_Text","Boolean","window","location","hostname","match","INITIAL_STATE","flag","arguments","length","undefined","action","Object","objectSpread","console","log","createStore","combineReducers","applyMiddleware","logger","store","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8PAQeA,SAPA,SAACC,GAAD,OACPC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,MAAO,CAAEC,OAAQ,GAAIC,MAAO,IAAKC,OAAQ,UAAWC,UAAW,KACnEC,QAAS,WAAKT,EAAMU,eACpBT,EAAAC,EAAAC,cAAA,+DCEDQ,EAPC,SAACC,GAEb,MAAQ,CACJC,KAAM,WACNC,QAASF,ICAXG,mLAEU,OACQd,EAAAC,EAAAC,cAAA,WACQF,EAAAC,EAAAC,cAAA,wBAAgBa,KAAKhB,MAAMiB,KAAKL,eAJ7CM,IAAMC,WAeVC,cANS,SAACC,GACjB,MAAO,CAAEJ,KAAMI,EAAMJ,OAGF,SAACK,GAAD,MAAe,CAAEX,QAAS,SAACC,GAAYU,EAASX,EAAQC,OAEpEQ,CAA6CL,GCZtDQ,mLACK,IAAAC,EAAAR,KAEP,OACEf,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,OACbxB,EAAAC,EAAAC,cAACuB,EAAD,CAAQhB,WAAY,kBAAMc,EAAKxB,MAAMW,QAAQ,iBAC7CV,EAAAC,EAAAC,cAACwB,EAAD,cANUR,aAmBHC,cAPS,SAACC,GAEvB,MAAO,CAAEJ,KAAMI,EAAMJ,OAGI,SAACK,GAAD,MAAe,CAAEX,QAAS,SAACC,GAAYU,EAASX,EAAQC,OAEpEQ,CAA6CG,GCdxCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+FClBAC,EAAgB,CACpBrB,MAAO,cAAcsB,MAAK,GAcbjB,EAZF,WAAmC,IAAlCI,EAAkCc,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA1BF,EAAeK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9C,OAAQC,EAAOzB,MACb,IAAK,WACLQ,EAAKkB,OAAAC,EAAA,EAAAD,CAAA,GACAlB,EADA,CAEHT,MAAOS,EAAMa,KAAOD,EAAcrB,MAAQ0B,EAAOxB,QACjDoB,MAAMb,EAAMa,OAIhB,OADEO,QAAQC,IAAI,oBAAiBrB,GACxBA,GCRMsB,cAAYC,YAAgB,CAAC3B,SAAQ4B,YAAgBC,MCGpEL,QAAQC,IAAIK,GACZC,IAASC,OACLhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAAUH,MAAOA,GACb9C,EAAAC,EAAAC,cAACgD,EAAD,OAEJC,SAASC,eAAe,SHoHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ad54225e.chunk.js","sourcesContent":["import React from 'react';\r\nconst Button = (props) =>\r\n        <div>\r\n            <button style={{ height: 40, width: 200, cursor: \"pointer\", marginTop: 100 }}\r\n                onClick={()=>{props.changeText()}}>\r\n                <b>CLick here. To Change Text in below !!!</b></button>\r\n        </div>\r\n        \r\nexport default Button;","const setName = (name1) => {\r\n    //console.log(\"hhhhhh\",name1);\r\n    return ({\r\n        type: \"SET_NAME\",\r\n        payload: name1\r\n    })\r\n}\r\nexport default setName;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport setName from '../../Actions/UserActions/';\r\n\r\nclass Text extends React.Component {\r\n        render() {\r\n                return (\r\n                        <div>\r\n                                <h1>my name is {this.props.user.name1}</h1>\r\n                        </div>\r\n                )\r\n        }\r\n}\r\nconst mapStateToProps = (state) => {\r\n        return({ user: state.user })\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({ setName: (name1) => { dispatch(setName(name1)) } })\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Text);","import React, { Component } from 'react';\nimport './App.css';\nimport Button from './Components/Button';\nimport Text from './Components/Text';\nimport { connect } from 'react-redux';\nimport setName from './Actions/UserActions';\n\nclass App extends Component {\n  render() {\n  //  console.log(this.props.user);\n    return (\n      <div className=\"App\">\n        <Button changeText={() => this.props.setName(\"helloWorld\")} />\n        <Text />\n        {/* { <Text getText={this.props.user.name1} />} */}\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n//  console.log(state.user);\n  return({ user: state.user });\n    };\n\nconst mapDispatchToProps = (dispatch) => ({ setName: (name1) => { dispatch(setName(name1))} });\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const INITIAL_STATE = {\r\n  name1: \"ahsan ahmed\",flag:false\r\n};\r\nconst user = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"SET_NAME\":\r\n    state = {\r\n      ...state,\r\n      name1: state.flag ? INITIAL_STATE.name1 : action.payload,\r\n      flag:!state.flag      }\r\n      break;\r\n    }\r\n    console.log(\"new-State---->\",state);\r\n  return state\r\n}\r\nexport default user;\r\n\r\n\r\n// const mylogger=(store)=>(next)=>(action)=>{\r\n//   console.log(\"logged action--->\",action);\r\n//   next(action);\r\n// }\r\n// store.subscribe(()=>{\r\n  //   console.log(\"store Updated--->\",store.getState());\r\n  // })\r\n","import { createStore, applyMiddleware,combineReducers } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport user from '../Reducers/TextReducer/index';\r\n//import auth from '../Reducers/authReducer/authReducer';\r\n\r\nexport default createStore(combineReducers({user}), applyMiddleware(logger))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './Store/index';\n\nconsole.log(store);\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}